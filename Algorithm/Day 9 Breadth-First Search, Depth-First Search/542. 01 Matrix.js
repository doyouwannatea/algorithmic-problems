/**
 * @param {number[][]} matrix
 * @return {number[][]}
 */
function updateMatrix(matrix) {
  const m = matrix.length,
    n = matrix[0].length,
    queue = [],
    checkMatrix = [];
  let dist = 1,
    queueTick = [];

  for (let i = 0; i < m; i++)
    for (let j = 0; j < n; j++) {
      if (!checkMatrix[i]) checkMatrix[i] = [];
      if (matrix[i][j] === 0) {
        queue.push([i, j]);
        checkMatrix[i][j] = 0;
      } else {
        checkMatrix[i][j] = Infinity;
      }
    }

  while (queue.length > 0) {
    const [i, j] = queue.shift();

    // 1) найти соседей
    const neighbors = [
      i > 0 && [i - 1, j],
      i < m - 1 && [i + 1, j],
      j > 0 && [i, j - 1],
      j < n - 1 && [i, j + 1],
    ].filter(Boolean);

    // 2) чекнуть соседей, если они не нули и не чекнуты то присвоить им значение dist
    // и добавить в список queueTick
    neighbors.forEach((n) => {
      const [i, j] = n;
      if (checkMatrix[i][j] === Infinity) {
        checkMatrix[i][j] = dist;
        queueTick.push([i, j]);
      }
    });
    // 3) если список queue пустой, а queueTick нет, то
    // увеличить dist на 1, перекинуть из queueTick в queue и очистить queueTick

    if (queue.length === 0 && queueTick.length > 0) {
      dist += 1;
      queue.push(...queueTick);
      queueTick = [];
    }
  }

  return checkMatrix;
}

// Output: [[0,0,0],[0,1,0],[0,0,0]]
console.log(
  updateMatrix([
    [0, 0, 0],
    [0, 1, 0],
    [0, 0, 0],
  ])
);

// Output: [[0,0,0],[0,1,0],[1,2,1]]
console.log(
  updateMatrix([
    [0, 0, 0],
    [0, 1, 0],
    [1, 1, 1],
  ])
);

// Output: [[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0]]
console.log(
  updateMatrix([
    [0, 1, 0],
    [0, 1, 0],
    [0, 1, 0],
    [0, 1, 0],
    [0, 1, 0],
  ])
);

// Output: [[0,1,0,1,2],[1,1,0,0,1],[0,0,0,1,0],[1,0,1,1,1],[1,0,0,0,1]]
console.log(
  updateMatrix([
    [0, 1, 0, 1, 1],
    [1, 1, 0, 0, 1],
    [0, 0, 0, 1, 0],
    [1, 0, 1, 1, 1],
    [1, 0, 0, 0, 1],
  ])
);

// // Output: [[1,0,1,1,0,0,1,0,0,1],[0,1,1,0,1,0,1,0,1,1],[0,0,1,0,1,0,0,1,0,0],[1,0,1,0,1,1,1,1,1,1],[0,1,0,1,1,0,0,0,0,1],[0,0,1,0,1,1,1,0,1,0],[0,1,0,1,0,1,0,0,1,1],[1,0,0,0,1,2,1,1,0,1],[2,1,1,1,1,2,1,0,1,0],[3,2,2,1,0,1,0,0,1,1]]
// console.log(
//   updateMatrix([
//     [1, 0, 1, 1, 0, 0, 1, 0, 0, 1],
//     [0, 1, 1, 0, 1, 0, 1, 0, 1, 1],
//     [0, 0, 1, 0, 1, 0, 0, 1, 0, 0],
//     [1, 0, 1, 0, 1, 1, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 0, 0, 0, 1],
//     [0, 0, 1, 0, 1, 1, 1, 0, 1, 0],
//     [0, 1, 0, 1, 0, 1, 0, 0, 1, 1],
//     [1, 0, 0, 0, 1, 1, 1, 1, 0, 1],
//     [1, 1, 1, 1, 1, 1, 1, 0, 1, 0],
//     [1, 1, 1, 1, 0, 1, 0, 0, 1, 1],
//   ])
// );

// console.log(
//   updateMatrix([
//     [1, 1, 0, 0, 1, 0, 0, 1, 1, 0],
//     [1, 0, 0, 1, 0, 1, 1, 1, 1, 1],
//     [1, 1, 1, 0, 0, 1, 1, 1, 1, 0],
//     [0, 1, 1, 1, 0, 1, 1, 1, 1, 1],
//     [0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
//     [1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
//     [0, 1, 1, 1, 1, 1, 1, 0, 0, 1],
//     [1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
//     [1, 1, 1, 0, 1, 0, 1, 1, 1, 1],
//   ])
// );
